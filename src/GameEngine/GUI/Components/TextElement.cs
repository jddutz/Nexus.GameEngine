using Microsoft.Extensions.Logging;
using Nexus.GameEngine.Animation;
using Nexus.GameEngine.Components;
using Nexus.GameEngine.Graphics;
using Nexus.GameEngine.Resources;
using Silk.NET.Maths;

namespace Nexus.GameEngine.GUI.Components;

/// <summary>
/// A UI component that displays text.
/// </summary>
public partial class TextElement()
    : RuntimeComponent, IDrawable
{
    public new record Template : RuntimeComponent.Template
    {
        /// <summary>
        /// The text content to display.
        /// </summary>
        public string? Text { get; set; }

        /// <summary>
        /// The color of the text.
        /// </summary>
        public Vector4D<float> Color { get; set; } = new(1, 1, 1, 1); // White

        /// <summary>
        /// The font size in pixels.
        /// </summary>
        public float FontSize { get; set; } = 12f;

        /// <summary>
        /// The font family name.
        /// </summary>
        public string FontName { get; set; } = "DefaultFont";

        /// <summary>
        /// Text alignment within the component bounds.
        /// </summary>
        public TextAlignment Alignment { get; set; } = TextAlignment.Left;

        /// <summary>
        /// Whether the text element should be rendered.
        /// </summary>
        public bool IsVisible { get; set; } = true;
    }

    // ComponentProperty fields - generator creates public properties with deferred updates
    [ComponentProperty]
    private string _text = string.Empty;

    [ComponentProperty(Duration = AnimationDuration.Normal, Interpolation = InterpolationMode.CubicEaseInOut)]
    private Vector4D<float> _color = new(1, 1, 1, 1); // White

    [ComponentProperty(Duration = AnimationDuration.Fast, Interpolation = InterpolationMode.Linear)]
    private float _fontSize = 12f;

    [ComponentProperty]
    private string _fontName = "DefaultFont";

    [ComponentProperty]
    private TextAlignment _alignment = TextAlignment.Left;

    [ComponentProperty]
    private bool _isVisible = true;

    // Properties are auto-generated by source generator from [ComponentProperty] fields above

    // Property change callbacks for validation
    partial void OnFontSizeChanged(float oldValue)
    {
        // Ensure minimum font size
        if (_fontSize < 1f)
            _fontSize = 1f;
    }

    partial void OnFontNameChanged(string? oldValue)
    {
        // Ensure non-null font name
        if (string.IsNullOrEmpty(_fontName))
            _fontName = "DefaultFont";
    }

    public bool ShouldRender => IsVisible;
    public uint RenderPriority => 1; // UI text layer

    /// <summary>
    /// Bounding box for text elements. Returns minimal box since these are UI elements.
    /// </summary>
    public Box3D<float> BoundingBox => new(Vector3D<float>.Zero, Vector3D<float>.Zero);

    /// <summary>
    /// Text elements participate in UI render pass (pass 1).
    /// </summary>
    public uint RenderPassFlags => 1u << 1; // UI pass

    /// <summary>
    /// Text elements are leaf components and don't render children.
    /// </summary>
    public bool ShouldRenderChildren => false;

    /// <summary>
    /// Configure the text element using the provided template.
    /// </summary>
    /// <param name="componentTemplate">Template containing configuration data</param>
    protected override void OnConfigure(IComponentTemplate? componentTemplate)
    {
        base.OnConfigure(componentTemplate);

        if (componentTemplate is Template template)
        {
            SetText(template.Text ?? string.Empty);
            SetColor(template.Color);
            SetFontSize(Math.Max(1f, template.FontSize)); // Ensure minimum size
            SetFontName(template.FontName ?? "DefaultFont");
            SetAlignment(template.Alignment);
            SetIsVisible(template.IsVisible);
        }
    }

    public void SetColor(float r, float g, float b, float a = 1.0f)
    {
        SetColor(new Vector4D<float>(r, g, b, a));
    }

    public void SetColor(string colorName)
    {
        // Use reflection to get named colors from Colors class
        var colorProperty = typeof(Colors).GetProperty(colorName,
            System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);
        if (colorProperty?.GetValue(null) is Vector4D<float> namedColor)
        {
            SetColor(namedColor);
        }
        else
        {
        }
    }

    public void AnimateColor(Vector4D<float> targetColor, float factor)
    {
        var currentColor = Color;
        var interpolatedColor = new Vector4D<float>(
            currentColor.X + (targetColor.X - currentColor.X) * factor,
            currentColor.Y + (targetColor.Y - currentColor.Y) * factor,
            currentColor.Z + (targetColor.Z - currentColor.Z) * factor,
            currentColor.W + (targetColor.W - currentColor.W) * factor
        );
        SetColor(interpolatedColor);
    }

    public void ScaleFontSize(float scaleFactor)
    {
        SetFontSize(FontSize * scaleFactor);
    }

    public IEnumerable<DrawCommand> GetDrawCommands(RenderContext context)
    {
        // TODO: Implement text rendering
        yield break;
    }
}
